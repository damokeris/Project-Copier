name: Build and Release Cross-Platform Java Copier

on:
  push:
    branches: [ main ]  # 推送到主分支时触发
  workflow_dispatch:    # 保留手动触发功能

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录以便版本计算

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Version and Tag
        id: version
        run: |
          # 获取当前时间戳和短提交哈希
          timestamp=$(date +%Y%m%d%H%M%S)
          commit_hash=$(git rev-parse --short HEAD)
          # 生成版本号格式：主分支版本号-时间戳-提交哈希
          version="1.0.0-$timestamp-$commit_hash"
          tag_name="v$version"
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "Generated version: $version"
          echo "Generated tag: $tag_name"

      - name: Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version.outputs.tag_name }}
          git push origin ${{ steps.version.outputs.tag_name }}

      - name: Build native executable with Maven
        run: mvn -Pnative package

      # 上传构建产物
      - name: Upload Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Windows
          path: target/SmartJavaCopier.exe

      - name: Upload Linux Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Linux
          path: target/SmartJavaCopier

      - name: Upload macOS Artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-macOS
          path: target/SmartJavaCopier

  release:
    name: Create Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build  # 依赖于build job完成
    permissions:
      contents: write  # 授予写权限以创建发布
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts  # 下载到artifacts目录

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.tag_name }}
          release_name: Release ${{ needs.build.outputs.tag_name }}
          draft: false
          prerelease: false
          body: |
            Automated release triggered by push to main branch.
            Version: ${{ needs.build.outputs.version }}
            Commit: ${{ github.sha }}

      - name: Check Artifact Paths
        run: |
          echo "Listing artifacts directory:"
          ls -la artifacts/
          echo "Checking Windows artifact:"
          if [ -f "artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe" ]; then
            echo "Windows artifact found."
          else
            echo "Error: Windows artifact not found"
            exit 1
          fi
          echo "Checking Linux artifact:"
          if [ -f "artifacts/SmartJavaCopier-Linux/SmartJavaCopier" ]; then
            echo "Linux artifact found."
          else
            echo "Error: Linux artifact not found"
            exit 1
          fi
          echo "Checking macOS artifact:"
          if [ -f "artifacts/SmartJavaCopier-macOS/SmartJavaCopier" ]; then
            echo "macOS artifact found."
          else
            echo "Error: macOS artifact not found"
            exit 1
          fi

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe
          asset_name: SmartJavaCopier-${{ needs.build.outputs.version }}-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-Linux/SmartJavaCopier
          asset_name: SmartJavaCopier-${{ needs.build.outputs.version }}-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-macOS/SmartJavaCopier
          asset_name: SmartJavaCopier-${{ needs.build.outputs.version }}-macos
          asset_content_type: application/octet-stream
