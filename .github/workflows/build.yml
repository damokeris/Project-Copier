name: Build and Release Cross-Platform Java Copier

on:
  push:
    branches: [ "main", "master" ]
    tags: [ 'v*' ]  # 添加tags触发，例如v1.0.0
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native executable with Maven
        run: mvn -Pnative package

      # 上传构建产物
      - name: Upload Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Windows
          path: target/SmartJavaCopier.exe

      - name: Upload Linux Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Linux
          path: target/SmartJavaCopier

      - name: Upload macOS Artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-macOS
          path: target/SmartJavaCopier

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build  # 依赖于build job完成
    if: startsWith(github.ref, 'refs/tags/')  # 只在打tag时运行
    # 添加权限设置
    permissions:
      contents: write  # 明确授予写权限，以创建Release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts  # 下载到artifacts目录

      - name: Extract Version from Tag
        id: get_version
        run: |
          # 从GITHUB_REF提取tag名（例如refs/tags/v1.0.0 -> v1.0.0）
          tag_name="${GITHUB_REF#refs/tags/}"
          # 去除v前缀（如果存在），得到纯版本号（例如1.0.0）
          version="${tag_name#v}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        # 升级到v2版本，并使用with传递token
        uses: actions/create-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # v2中使用with而不是env
          tag_name: ${{ steps.get_version.outputs.tag_name }}  # 使用原始tag名，如v1.0.0
          release_name: SmartJavaCopier ${{ steps.get_version.outputs.version }}  # release名，如SmartJavaCopier 1.0.0
          body: |  # release描述
            Automatic release for version ${{ steps.get_version.outputs.version }}.
            Built for Windows, Linux, and macOS using GraalVM native image.
          draft: false
          prerelease: false

      - name: Upload Windows Asset
        # 升级到v2版本
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe
          asset_name: SmartJavaCopier-${{ steps.get_version.outputs.version }}-windows.exe
          asset_content_type: application/octet-stream
          token: ${{ secrets.GITHUB_TOKEN }}  # v2中需要显式传递token

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-Linux/SmartJavaCopier
          asset_name: SmartJavaCopier-${{ steps.get_version.outputs.version }}-linux
          asset_content_type: application/octet-stream
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-macOS/SmartJavaCopier
          asset_name: SmartJavaCopier-${{ steps.get_version.outputs.version }}-macos
          asset_content_type: application/octet-stream
          token: ${{ secrets.GITHUB_TOKEN }}
