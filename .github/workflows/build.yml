name: Build and Release Cross-Platform Java Copier

on:
  push:
    branches: [ main ]  # 推送到主分支时触发
  workflow_dispatch:    # 保留手动触发功能

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read  # 只读权限，不推送标签

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录以便版本计算

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native executable with Maven
        run: mvn -Pnative package

      # 上传构建产物
      - name: Upload Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Windows
          path: target/SmartJavaCopier.exe

      - name: Upload Linux Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Linux
          path: target/SmartJavaCopier

      - name: Upload macOS Artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-macOS
          path: target/SmartJavaCopier

  release:
    name: Create Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build  # 依赖于build job完成
    permissions:
      contents: write  # 授予写权限以创建发布和推送标签
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录以便版本计算

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts  # 下载到artifacts目录

      - name: Determine Version and Tag
        id: determine_version
        run: |
          # 获取最新的标签
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # 移除v前缀并提取纯数字版本部分
          version_number=${latest_tag#v}
          pure_version=$(echo "$version_number" | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.0")
          echo "Pure version: $pure_version"
          
          IFS='.' read -r major minor patch <<< "$pure_version"
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          
          timestamp=$(date +%Y%m%d%H%M%S)
          commit_hash=$(git rev-parse --short HEAD)
          version="$new_version-$timestamp-$commit_hash"
          tag_name="v$version"
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "Using version: $version"
          echo "Using tag: $tag_name"

      - name: Create Git Tag and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.determine_version.outputs.tag_name }}
          git push origin ${{ steps.determine_version.outputs.tag_name }}

      - name: Check Artifact Paths
        run: |
          echo "Listing artifacts directory:"
          ls -la artifacts/
          echo "Checking Windows artifact:"
          if [ -f "artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe" ]; then
            echo "Windows artifact found."
          else
            echo "Error: Windows artifact not found"
            exit 1
          fi
          echo "Checking Linux artifact:"
          if [ -f "artifacts/SmartJavaCopier-Linux/SmartJavaCopier" ]; then
            echo "Linux artifact found."
          else
            echo "Error: Linux artifact not found"
            exit 1
          fi
          echo "Checking macOS artifact:"
          if [ -f "artifacts/SmartJavaCopier-macOS/SmartJavaCopier" ]; then
            echo "macOS artifact found."
          else
            echo "Error: macOS artifact not found"
            exit 1
          fi

      - name: Rename Artifacts
        run: |
          # 重命名文件以包含版本信息
          mv artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe "artifacts/SmartJavaCopier-${{ steps.determine_version.outputs.version }}-windows.exe"
          mv artifacts/SmartJavaCopier-Linux/SmartJavaCopier "artifacts/SmartJavaCopier-${{ steps.determine_version.outputs.version }}-linux"
          mv artifacts/SmartJavaCopier-macOS/SmartJavaCopier "artifacts/SmartJavaCopier-${{ steps.determine_version.outputs.version }}-macos"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_version.outputs.tag_name }}
          name: Release ${{ steps.determine_version.outputs.tag_name }}
          body: |
            Automated release triggered by push to main branch.
            Version: ${{ steps.determine_version.outputs.version }}
            Commit: ${{ github.sha }}
          files: |
            artifacts/SmartJavaCopier-${{ steps.determine_version.outputs.version }}-windows.exe
            artifacts/SmartJavaCopier-${{ steps.determine_version.outputs.version }}-linux
            artifacts/SmartJavaCopier-${{ steps.determine_version.outputs.version }}-macos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
