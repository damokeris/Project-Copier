name: Build and Release Cross-Platform Java Copier

on:
  push:
    tags: [ 'v*' ]  # 只在推送tag时触发，例如v1.0.0
  workflow_dispatch:  # 保留手动触发功能

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # 检出tag对应的提交

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native executable with Maven
        run: mvn -Pnative package

      # 上传构建产物
      - name: Upload Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Windows
          path: target/SmartJavaCopier.exe

      - name: Upload Linux Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-Linux
          path: target/SmartJavaCopier

      - name: Upload macOS Artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: SmartJavaCopier-macOS
          path: target/SmartJavaCopier

  release:
    name: Update Release Assets
    runs-on: ubuntu-latest
    needs: build  # 依赖于build job完成
    permissions:
      contents: write  # 授予写权限以更新Release资产
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts  # 下载到artifacts目录

      - name: Extract Version from Tag
        id: get_version
        run: |
          # 从GITHUB_REF提取tag名（例如refs/tags/v1.0.0 -> v1.0.0）
          tag_name="${GITHUB_REF#refs/tags/}"
          # 去除v前缀（如果存在），得到纯版本号（例如1.0.0）
          version="${tag_name#v}"
          # 移除任何前导或尾随空格和换行符，确保字符串干净
          tag_name=$(echo "$tag_name" | tr -d '[:space:]')
          version=$(echo "$version" | tr -d '[:space:]')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

      - name: Debug Version and Tag
        run: |
          echo "Extracted Version: '${{ steps.get_version.outputs.version }}'"
          echo "Extracted Tag Name: '${{ steps.get_version.outputs.tag_name }}'"
          # 检查版本和tag名是否包含异常字符
          if echo "${{ steps.get_version.outputs.version }}" | grep -q '[^a-zA-Z0-9._-]'; then
            echo "Warning: Version contains potentially invalid characters."
          fi
          if echo "${{ steps.get_version.outputs.tag_name }}" | grep -q '[^a-zA-Z0-9._-]'; then
            echo "Warning: Tag name contains potentially invalid characters."
          fi

      - name: Get Release Upload URL
        id: get_release
        run: |
          tag_name="${{ steps.get_version.outputs.tag_name }}"
          echo "Using tag name for API call: '$tag_name'"
          # 调用GitHub API获取发布信息
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag_name")
          echo "API Response: $response"  # 输出API响应用于调试
          upload_url=$(echo "$response" | jq -r '.upload_url')
          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
            echo "Error: Release for tag $tag_name not found or upload_url is missing."
            exit 1
          fi
          # 移除upload_url中的模板部分（如{?name,label}）
          upload_url=$(echo "$upload_url" | sed 's/{.*}//')
          echo "Processed Upload URL: $upload_url"
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT

      - name: Check Artifact Paths
        run: |
          # 检查下载的artifacts路径是否存在
          echo "Listing artifacts directory:"
          ls -la artifacts/
          echo "Checking Windows artifact:"
          if [ -f "artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe" ]; then
            echo "Windows artifact found."
          else
            echo "Error: Windows artifact not found at artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe"
            exit 1
          fi
          echo "Checking Linux artifact:"
          if [ -f "artifacts/SmartJavaCopier-Linux/SmartJavaCopier" ]; then
            echo "Linux artifact found."
          else
            echo "Error: Linux artifact not found at artifacts/SmartJavaCopier-Linux/SmartJavaCopier"
            exit 1
          fi
          echo "Checking macOS artifact:"
          if [ -f "artifacts/SmartJavaCopier-macOS/SmartJavaCopier" ]; then
            echo "macOS artifact found."
          else
            echo "Error: macOS artifact not found at artifacts/SmartJavaCopier-macOS/SmartJavaCopier"
            exit 1
          fi

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-Windows/SmartJavaCopier.exe
          asset_name: SmartJavaCopier-${{ steps.get_version.outputs.version }}-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-Linux/SmartJavaCopier
          asset_name: SmartJavaCopier-${{ steps.get_version.outputs.version }}-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: artifacts/SmartJavaCopier-macOS/SmartJavaCopier
          asset_name: SmartJavaCopier-${{ steps.get_version.outputs.version }}-macos
          asset_content_type: application/octet-stream
